{"version":3,"sources":["components/Query/index.tsx","queries/nav/index.tsx","components/Nav/DropNavLink.tsx","components/Nav/index.tsx","components/CustomComponents/models.tsx","components/CustomComponents/Header/index.tsx","components/CustomComponents/ImageSlider/index.tsx","components/CustomComponents/index.tsx","components/CustomComponents/Header/type.tsx","components/CustomComponents/Header/query.tsx","components/CustomComponents/Paragraph/type.tsx","components/CustomComponents/Paragraph/query.tsx","components/CustomComponents/Paragraph/index.tsx","components/CustomComponents/Image/type.tsx","components/CustomComponents/Image/query.tsx","components/CustomComponents/Image/index.tsx","components/CustomComponents/ImageSlider/type.tsx","components/CustomComponents/ImageSlider/query.tsx","components/CustomComponents/ImageGallery/type.tsx","components/CustomComponents/ImageGallery/query.tsx","components/CustomComponents/ImageGallery/index.tsx","components/CustomComponents/RichText/type.tsx","components/CustomComponents/RichText/query.tsx","components/CustomComponents/RichText/index.tsx","components/CustomComponents/TwitterFeed/type.tsx","components/CustomComponents/TwitterFeed/query.tsx","components/CustomComponents/TwitterFeed/index.tsx","components/CustomComponents/YoutubeVideo/type.tsx","components/CustomComponents/YoutubeVideo/query.tsx","components/CustomComponents/YoutubeVideo/index.tsx","queries/custom-page/index.tsx","components/CustomPage/index.tsx","containers/App.tsx","utils/apolloClient.tsx","index.tsx"],"names":["Query","children","query","variables","spin","useQuery","data","loading","error","JSON","stringify","NAV_QUERY","gql","SubNavLink","navBarItem","useState","show","setShow","key","url","className","onClick","to","text","subNavItem","map","x","Nav","args","toggleBurger","setState","isActive","state","props","history","listen","social","isDesktop","href","link","icon","length","DropNavLink","result","logo","nav","src","role","aria-label","aria-expanded","data-target","aria-hidden","id","navitem","getLink","socialLink","getIcon","React","Component","CustomComponent","component","this","subtext","subtitle","SingleCard","image","source","Map","Header","isHalf","alt","sliderimage","Image","username","height","dataSource","sourceType","screenName","options","onLoad","console","log","videoId","autoPlay","containerClassName","opts","playerVars","autoplay","CUSTOM_PAGE_QUERY","Array","from","CustomComponents","content","get","__typename","CustomPage","pathname","location","fetchPolicy","customPages","customPage","pop","componentData","App","path","cache","InMemoryCache","HttpLink","uri","process","client","ApolloClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9ef07d1.chunk.js","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { DocumentNode } from \"graphql\";\nimport queryResult from \"./queryResult\";\n\ntype TParams<TData, TVars> = {\n  children: (data: queryResult<TData> | undefined) => JSX.Element;\n  query: DocumentNode;\n  variables: TVars;\n  spin?: boolean | undefined;\n};\n\nconst Query = <TData extends {}, TVars extends {}>({\n  children,\n  query,\n  variables,\n  spin = false,\n}: TParams<TData, TVars>) => {\n  const { data, loading, error } = useQuery<TData, TVars>(query, {\n    variables,\n  });\n\n  if (loading) return <p>{spin ? \"Loading...\" : \"\"}</p>;\n  if (error) return <p>Error: {JSON.stringify(error)}</p>;\n  return children({ data });\n};\n\nexport default Query;\n","import gql from \"graphql-tag\";\n\nconst NAV_QUERY = gql`\n  query nav {\n    logo {\n      logo {\n        url\n      }\n    }\n    nav {\n      navitem {\n        url\n        text\n        subNavItem {\n          url\n          text\n        }\n      }\n      socialLink {\n        link\n        icon\n      }\n    }\n  }\n`;\n\nexport default NAV_QUERY;\n","import { Link } from \"react-router-dom\";\nimport React, { useState } from \"react\";\n\ntype SubNavBarItem = {\n  url: string;\n  text: string;\n};\ntype NavBarItem = {\n  url: string;\n  text: string;\n  subNavItem: SubNavBarItem[];\n};\nconst SubNavLink = (navBarItem: NavBarItem) => {\n  const [show, setShow] = useState(false);\n  const toggleShow = () => setShow(!show);\n\n  return (\n    <div key={navBarItem.url} className=\"navbar-item has-dropdown is-hoverable\">\n      <div className=\"navbar-link\" onClick={toggleShow}>\n        <Link to={navBarItem.url} key={navBarItem.url}>\n          {navBarItem.text}\n        </Link>\n      </div>\n\n      <div className={`navbar-dropdown ${show ? \"\" : \"is-hidden-touch\"}`}>\n        {navBarItem.subNavItem.map((x) => (\n          <Link to={x.url} key={x.url} className=\"navbar-item\">\n            {x.text}\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SubNavLink;\n","import React from \"react\";\nimport Query from \"../Query\";\nimport { Link, RouteComponentProps, Route } from \"react-router-dom\";\n\nimport NAV_QUERY from \"../../queries/nav\";\nimport queryResult from \"../Query/queryResult\";\nimport DropNavLink from \"./DropNavLink\";\n\ntype TState = {\n  isActive: boolean;\n};\ntype SubNavBarItem = {\n  url: string;\n  text: string;\n};\ntype NavBarItem = {\n  url: string;\n  text: string;\n  subNavItem: SubNavBarItem[];\n};\ntype TImage = {\n  url: string;\n};\ntype TLogo = {\n  logo: TImage;\n};\ntype TNav = {\n  navitem: NavBarItem[];\n  socialLink: TSocial[];\n};\ntype TSocial = {\n  link: string;\n  icon: string;\n};\ntype TData = {\n  logo: TLogo;\n  nav: TNav;\n};\n\nexport default class Nav extends React.Component<RouteComponentProps, TState> {\n  constructor(args: Readonly<RouteComponentProps>) {\n    super(args);\n\n    this.state = {\n      isActive: false,\n    };\n\n    this.props.history.listen(() => {\n      this.setState({ isActive: false });\n    });\n  }\n  getIcon(social: TSocial | undefined, isDesktop: boolean) {\n    if (isDesktop)\n      return (\n        <a href={social?.link} className=\"navbar-item\">\n          <div className=\"icon\">\n            <i className={`fab fa-2x fa-${social?.icon}`}></i>\n          </div>\n        </a>\n      );\n    return (\n      <a href={social?.link} className=\"column\">\n        <div className=\"icon\">\n          <i className={`fab fa-2x fa-${social?.icon}`}></i>\n        </div>\n      </a>\n    );\n  }\n  getLink(navBarItem: NavBarItem) {\n    if (navBarItem.subNavItem.length > 0)\n      return <DropNavLink {...navBarItem} />;\n    return (\n      <Link to={navBarItem.url} key={navBarItem.url} className=\"navbar-item\">\n        {navBarItem.text}\n      </Link>\n    );\n  }\n  toggleBurger = () => {\n    this.setState({\n      isActive: !this.state.isActive,\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Query<TData, {}> variables={{}} query={NAV_QUERY}>\n          {(result: queryResult<TData> | undefined) => {\n            const logo = result?.data?.logo;\n            const nav = result?.data?.nav;\n\n            return (\n              <div>\n                <nav className=\"navbar is-primary\">\n                  <div className=\"navbar-brand\">\n                    <Link to=\"/\" className=\"navbar-item\">\n                      <img src={`${logo?.logo.url}`} />\n                    </Link>\n\n                    <a\n                      onClick={this.toggleBurger}\n                      role=\"button\"\n                      className={`navbar-burger burger ${\n                        this.state.isActive ? \"is-active\" : \"\"\n                      }`}\n                      aria-label=\"menu\"\n                      aria-expanded=\"false\"\n                      data-target=\"navbar-container\"\n                    >\n                      <span aria-hidden=\"true\"></span>\n                      <span aria-hidden=\"true\"></span>\n                      <span aria-hidden=\"true\"></span>\n                    </a>\n                  </div>\n                  <div\n                    id=\"navbar-container\"\n                    className={`navbar-menu ${\n                      this.state.isActive ? \"is-active\" : \"\"\n                    }`}\n                  >\n                    <div className=\"navbar-start\">\n                      {nav?.navitem.map((x) => this.getLink(x))}\n                    </div>\n                    <div className=\"navbar-end is-hidden-touch\">\n                      {nav?.socialLink?.map((x) => this.getIcon(x, true))}\n                    </div>\n                    <div className=\"navbar-end is-hidden-desktop\">\n                      <div className=\"navbar-item columns is-mobile\">\n                        {nav?.socialLink?.map((x) => this.getIcon(x, false))}\n                      </div>\n                    </div>\n                  </div>\n                </nav>\n              </div>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n","import { DocumentNode } from \"graphql\";\n\nexport class CustomComponent {\n  constructor(query: string, component: (inp: any) => JSX.Element) {\n    this.component = component;\n    this.query = query;\n  }\n  component: (inp: any) => JSX.Element;\n  query: string;\n}\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\n\nconst subtitle = (subtext: string) => {\n  if (subtext) return <h2 className=\"subtitle\">{subtext}</h2>;\n};\n\nexport default ({ text, subtext }: HeaderModel) => {\n  return (\n    <section className=\"hero column is-full\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">{text}</h1>\n          {subtitle(subtext)}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { t as HeaderType, query as HeaderQuery };\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst SingleCard = (image: SliderImage) => {\n  return (\n    <div className=\"column is-one-third\">\n      <div className=\"card card-equal-height\">\n        <div className=\"card-image\">\n          <img src={image.image.url} />\n        </div>\n        <div className=\"card-content content\">\n          <ReactMarkdown source={image.text} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ({ sliderimage, isHalf }: SliderImages) => {\n  return (\n    <div className={`column ${isHalf ? \"is-half\" : \"is-full\"}`}>\n      <div className=\"images columns scroll-x-hidden\">\n        {sliderimage.map((x) => {\n          return <SingleCard key={x.image.url} {...x} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport { query as ImageSliderQuery, t as ImageSliderType };\n","import { CustomComponent } from \"./models\";\nimport Header, { HeaderType, HeaderQuery } from \"./Header\";\nimport Paragraph, { ParagraphType, ParagraphQuery } from \"./Paragraph\";\nimport RichText, { RichTextType, RichTextQuery } from \"./RichText\";\nimport Image, { ImageType, ImageQuery } from \"./Image\";\nimport ImageSlider, { ImageSliderType, ImageSliderQuery } from \"./ImageSlider\";\nimport TwitterFeed, { TwitterFeedType, TwitterFeedQuery } from \"./TwitterFeed\";\nimport ImageGallery, {\n  ImageGalleryType,\n  ImageGalleryQuery,\n} from \"./ImageGallery\";\nimport YoutubeVideo, {\n  YoutubeVideoType,\n  YoutubeVideoQuery,\n} from \"./YoutubeVideo\";\n\nexport default new Map<string, CustomComponent>([\n  [HeaderType, new CustomComponent(HeaderQuery, Header)],\n  [ParagraphType, new CustomComponent(ParagraphQuery, Paragraph)],\n  [ImageType, new CustomComponent(ImageQuery, Image)],\n  [ImageSliderType, new CustomComponent(ImageSliderQuery, ImageSlider)],\n  [ImageGalleryType, new CustomComponent(ImageGalleryQuery, ImageGallery)],\n  [RichTextType, new CustomComponent(RichTextQuery, RichText)],\n  [TwitterFeedType, new CustomComponent(TwitterFeedQuery, TwitterFeed)],\n  [YoutubeVideoType, new CustomComponent(YoutubeVideoQuery, YoutubeVideo)],\n]);\n","export default \"ComponentHeading\";\n","export default `\n    {\n        text\n        subtext\n    }`;\n","export default \"ComponentParagraph\";\n","export default `\n    {\n        text\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\n\nexport default ({ text, isHalf }: ParagraphModel) => {\n  return (\n    <div className={`column ${isHalf ? \"is-half\" : \"is-full\"}`}>\n      <div className=\"paragraph content\">\n        <p>{text}</p>\n      </div>\n    </div>\n  );\n};\n\nexport { query as ParagraphQuery, t as ParagraphType };\n","export default \"ComponentImage\";\n","export default `\n    {\n        image {\n            url\n        }\n        alt\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\n\nexport default ({ image, alt, isHalf }: ImageModel) => {\n  return (\n    <div className={`column ${isHalf ? \"is-half\" : \"is-full\"}`}>\n      <div className=\"image\">\n        <img src={image.url} alt={alt} />\n      </div>\n    </div>\n  );\n};\n\nexport { query as ImageQuery, t as ImageType };\n","export default \"ComponentImageslider\";\n","export default `\n    {\n        sliderimage {\n            text\n            image {\n                url\n            }\n        }\n        isHalf\n    }`;\n","export default \"ComponentImageGallery\";\n","export default `\n    {\n        Image {\n            text\n            image {\n                url\n            }\n        }\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst singleCard = (image: GalleryImage) => {\n  return (\n    <div className=\"column is-one-third\">\n      <div className=\"card card-equal-height\">\n        <div className=\"card-image\">\n          <img src={image.image.url} />\n        </div>\n        <div className=\"card-content content\">\n          <ReactMarkdown source={image.text} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ({ Image, isHalf }: GalleryImages) => {\n  return (\n    <div className={`column ${isHalf ? \"is-half\" : \"is-full\"}`}>\n      <div className=\"images columns is-multiline\">\n        {Image.map((x) => {\n          return singleCard(x);\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport { query as ImageGalleryQuery, t as ImageGalleryType };\n","export default \"ComponentRichText\";\n","export default `\n    {\n        text\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default ({ text, isHalf }: RichTextModel) => {\n  return (\n    <div\n      className={`rich-text content column ${isHalf ? \"is-half\" : \"is-full\"}`}\n    >\n      <ReactMarkdown source={text} />\n    </div>\n  );\n};\n\nexport { query as RichTextQuery, t as RichTextType };\n","export default \"ComponentTwitterFeed\";\n","export default `\n    {\n        height\n        username\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\nimport { Timeline } from \"react-twitter-widgets\";\n\nexport default ({ username, isHalf, height }: TwitterFeedModel) => {\n  return (\n    <div\n      className={`twitted-feed card content column ${\n        isHalf ? \"is-half\" : \"is-full\"\n      }`}\n    >\n      <Timeline\n        dataSource={{\n          sourceType: \"profile\",\n          screenName: username,\n        }}\n        options={{\n          username: username,\n          height: height,\n        }}\n        onLoad={() => console.log(\"Timeline is loaded!\")}\n      />\n    </div>\n  );\n};\n\nexport { query as TwitterFeedQuery, t as TwitterFeedType };\n","export default \"ComponentYoutubeVideo\";\n","export default `\n    {\n        videoId\n        autoPlay\n        isHalf\n    }`;\n","import React from \"react\";\nimport query from \"./query\";\nimport t from \"./type\";\nimport YouTube from \"react-youtube\";\n\nexport default ({ videoId, isHalf, autoPlay }: YoutubeVideoModel) => {\n  return (\n    <YouTube\n      containerClassName={`scroll-x youtube-video column ${\n        isHalf ? \"is-half\" : \"is-full\"\n      }`}\n      videoId={videoId}\n      opts={{\n        playerVars: {\n          autoplay: autoPlay ? 1 : 0,\n        },\n      }}\n    />\n  );\n};\n\nexport { query as YoutubeVideoQuery, t as YoutubeVideoType };\n","import gql from \"graphql-tag\";\nimport CustomComponents from \"../../components/CustomComponents\";\n\nconst CUSTOM_PAGE_QUERY = gql`  \n  query customPages($url: String) {\n      customPages(where: {\n          url: $url\n      }, limit: 1) {\n          title\n          content {\n              __typename\n              ${Array.from(CustomComponents).map((x) => {\n                return `...on ${x[0]} ${x[1]?.query}`;\n              })}\n          }\n      }\n  }\n`;\n\nexport default CUSTOM_PAGE_QUERY;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport CUSTOM_PAGE_QUERY from \"../../queries/custom-page\";\nimport CustomComponents from \"../CustomComponents\";\nimport { RouteComponentProps } from \"react-router\";\nimport Header from \"../CustomComponents/Header\";\n\ntype TParams = { url: string };\ntype TCustomComponent = {\n  __typename: string;\n};\ntype TComponentProps = {\n  content: TCustomComponent;\n};\ntype TCustomPage = {\n  content: TCustomComponent[];\n};\ntype TData = {\n  customPages: TCustomPage[] | undefined;\n};\n\nconst CustomComponent = ({ content }: TComponentProps) => {\n  const Component = CustomComponents.get(content.__typename)?.component;\n  if (Component) return <Component {...content} />;\n  return <p>{`Unrecognized component: ${content.__typename}`}</p>;\n};\n\nconst CustomPage = ({\n  location: { pathname },\n}: RouteComponentProps<TParams>) => {\n  const { data, loading, error } = useQuery<TData, TParams>(CUSTOM_PAGE_QUERY, {\n    variables: { url: pathname },\n    fetchPolicy: \"no-cache\",\n  });\n\n  const customPages = data?.customPages;\n  const customPage = customPages?.pop();\n  if (loading) return Header({ text: \"Loading...\", subtext: \"\" });\n  if (error) return Header({ text: `Error! ${error}`, subtext: \"\" });\n  if (!customPage) return Header({ text: \"Page not found\", subtext: \"\" });\n  return (\n    <div className=\"custom-page\">\n      <div className=\"dynamic-zone columns is-multiline\">\n        {customPage?.content.map((componentData) => {\n          return (\n            <CustomComponent\n              content={componentData}\n              key={JSON.stringify(componentData)}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default CustomPage;\n","import React from \"react\";\nimport Nav from \"../components/Nav\";\nimport { Route, Switch } from \"react-router-dom\";\nimport CustomPage from \"../components/CustomPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Nav} />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/\" component={CustomPage} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: `${process.env.REACT_APP_BACKEND_URL}/graphql`,\n});\nconst client = new ApolloClient({\n  cache,\n  link,\n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport { ApolloProvider } from \"react-apollo\";\nimport client from \"./utils/apolloClient\";\nimport \"./index.css\";\nimport \"./App.sass\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}